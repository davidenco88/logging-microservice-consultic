// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v3.20.3
// source: proto/logging.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "logging";

export interface Empty {
}

export interface CreateLoggingDto {
  parameter: string;
}

export const LOGGING_PACKAGE_NAME = "logging";

export interface LoggingServiceClient {
  pin(request: Empty): Observable<CreateLoggingDto>;

  createLogging(request: CreateLoggingDto): Observable<CreateLoggingDto>;
}

export interface LoggingServiceController {
  pin(request: Empty): Promise<CreateLoggingDto> | Observable<CreateLoggingDto> | CreateLoggingDto;

  createLogging(request: CreateLoggingDto): Promise<CreateLoggingDto> | Observable<CreateLoggingDto> | CreateLoggingDto;
}

export function LoggingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["pin", "createLogging"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LoggingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LoggingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LOGGING_SERVICE_NAME = "LoggingService";
